name: CI/CD Pipeline for Flask App

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
  AWS_REGION: us-east-1
  EKS_CLUSTER: flask-cluster
  NAMESPACE: flask-app

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout source code
      uses: actions/checkout@v4

    - name: Set up Python 3.11
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest

    - name: Run tests
      run: |
        pytest

  docker-build-and-publish:
    runs-on: ubuntu-latest
    needs: build-and-test
    outputs:
      image-tag: ${{ steps.set-tag.outputs.tag }}

    steps:
    - name: Checkout source code
      uses: actions/checkout@v4

    - name: Set dynamic image tag
      id: set-tag
      run: echo "tag=$(date +%Y%m%d%H%M%S)-${GITHUB_SHA::8}" >> $GITHUB_OUTPUT

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Log in to DockerHub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./DockerFile
        push: true
        tags: |
          ${{ secrets.DOCKER_USERNAME }}/flask-app:${{ steps.set-tag.outputs.tag }}
          ${{ secrets.DOCKER_USERNAME }}/flask-app:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max

  deploy-to-eks:
    runs-on: ubuntu-latest
    needs: docker-build-and-publish
    environment: production
    steps:
    - name: Checkout source code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Install kubectl
      uses: azure/setup-kubectl@v3

    - name: Install envsubst
      run: sudo apt-get install gettext-base -y

    - name: Set up kubeconfig from GitHub Secret
      run: |
        mkdir -p $HOME/.kube
        echo "${{ secrets.KUBECONFIG_DATA }}" | base64 -d > $HOME/.kube/config


    - name: Deploy to EKS cluster
      run: |
        # Create namespace if not exists
        kubectl create namespace ${{ env.NAMESPACE }} --dry-run=client -o yaml | kubectl apply -f -
        
        # Substitute variables in deployment.yaml
        export DOCKER_USERNAME=${{ env.DOCKER_USERNAME }}
        export IMAGE_TAG=${{ needs.docker-build-and-publish.outputs.image-tag }}
        envsubst < deployment-template.yaml > deployment-processed.yaml
        
        # Apply deployment
        kubectl apply -f deployment-processed.yaml
        
        # Verify deployment
        kubectl rollout status deployment/flask-app -n ${{ env.NAMESPACE }}
        kubectl get pods -n ${{ env.NAMESPACE }}
        kubectl get svc -n ${{ env.NAMESPACE }}

    - name: Get service URL
      run: |
        kubectl get svc flask-service -n ${{ env.NAMESPACE }} -o jsonpath='{.status.loadBalancer.ingress[0].hostname}'
        echo ""