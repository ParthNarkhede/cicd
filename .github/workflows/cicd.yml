name: CI/CD Pipeline for Flask App

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout source code
      uses: actions/checkout@v4

    - name: Set up Python 3.11
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Run tests
      run: |
        pytest

  docker-build-and-publish:
    runs-on: ubuntu-latest
    needs: build-and-test

    steps:
    - name: Checkout source code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Log in to DockerHub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./DockerFile
        push: true
        tags: |
          ${{ secrets.DOCKER_USERNAME }}/flasktest-app:latest

    - name: Image Digest
      run: echo ${{ steps.docker_build.outputs.digest }}

  deploy:
    needs: docker-build-and-publish
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'v1.29.0'

    - name: Set up AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: Set up kubeconfig
      run: |
        mkdir -p $HOME/.kube
        echo "${{ secrets.KUBECONFIG_DATA }}" | base64 -d > $HOME/.kube/config

    - name: Check cluster access
      run: kubectl get nodes

    - name: Ensure namespace exists
      run: kubectl create namespace flask-app || true

    # Add the forced redeployment here
    - name: Force complete redeployment
      run: |
        # Delete the deployment (will not delete the service)
        kubectl delete deployment flask-app -n flask-app --ignore-not-found
        # Recreate from manifest
        kubectl apply -f deployment.yaml -n flask-app
        # Wait for completion
        kubectl rollout status deployment/flask-app -n flask-app --timeout=120s

    # Keep your existing verification step
    - name: Verify deployment
      run: |
        kubectl rollout status deployment/flask-app -n flask-app --timeout=90s